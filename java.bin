#include <stdio.h>
#include <string.h>

#define MAX_ERRORS 150
#define MAX_LINE_LENGTH 256

typedef struct {
    char command[MAX_LINE_LENGTH];
    char error_message[MAX_LINE_LENGTH];
} ErrorMapping;

// Predefined error mappings based on the commands provided
//ErrorMapping error_map[MAX_ERRORS] = {
//    {"${single}", "Error on line 1: Uncaught ReferenceError: ${single} is not defined"},
//    {"console.log\"\"", "Error on line 1: Uncaught SyntaxError: Unexpected string"},
//    {"console.log\"${value}\"", "Error on line 1: Uncaught SyntaxError: Unexpected string"},
//    {"console.log \"\"", "Error on line 1: Uncaught SyntaxError: Unexpected string"},
//    {"console.log \"${value}\"", "Error on line 1: Uncaught SyntaxError: Unexpected string"},
//    {"console.log(\"\");", ""},
    // Add other error mappings here
//    ...
//};
// /> console.log""
// Command: console.log"" -> Error on line 1: Uncaught ReferenceError: console.log""og""og""og""og"
// Received input, evaluate......
// /> console.log"value"
// Command: console.log"value" -> Error on line 1: Uncaught ReferenceError: console.log"value"og"value"og"val
// Received input, evaluate......
// />
// Above is wrong, happens with first line using ${single} above
// 
// 

// /> console.log""
// Command: console.log"" -> Error on line 1: Uncaught SyntaxError: Unexpected string
// Received input, evaluate......
// /> console.log"value"
// Command: console.log"value" -> Error on line 1: Uncaught SyntaxError: Unexpected string
// Received input, evaluate......
// />
// Above is right, works with current code, but must remove first ErrorMapping line.


// Predefined error mappings based on the commands provided
ErrorMapping error_map[MAX_ERRORS] = {

...


};



void lookup_error(const char* command) {
    for (int i = 0; i < MAX_ERRORS; i++) {
        // Check for exact match
        if (strcmp(error_map[i].command, command) == 0) {
            printf("Command: %s -> %s\n", command, error_map[i].error_message);
            return;
        }

        // Check for pattern match with ${single} placeholder
        char* single_placeholder = strstr(error_map[i].command, "${single}");
        if (single_placeholder != NULL) {
            // Ensure the command is a single word (no spaces) and matches the pattern
            if (strchr(command, ' ') == NULL) {
                // Replace ${single} in the error message with the actual command
                char error_message[MAX_LINE_LENGTH];
                strncpy(error_message, error_map[i].error_message, MAX_LINE_LENGTH);
                char* single_pos = strstr(error_message, "${single}");
                if (single_pos != NULL) {
                    snprintf(single_pos, MAX_LINE_LENGTH - (single_pos - error_message), "%s%s", command, single_pos + strlen("${single}"));
                }

                printf("Command: %s -> %s\n", command, error_message);
                return;
            }
        }

        // Check for pattern match with ${value} placeholder
        char* value_placeholder = strstr(error_map[i].command, "${value}");
        if (value_placeholder != NULL) {
            // Split the command at the placeholder
            char prefix[MAX_LINE_LENGTH];
            char suffix[MAX_LINE_LENGTH];

            strncpy(prefix, error_map[i].command, value_placeholder - error_map[i].command);
            prefix[value_placeholder - error_map[i].command] = '\0';  // Null-terminate the prefix

            strcpy(suffix, value_placeholder + strlen("${value}"));  // Suffix after ${value}

            // Check if the input matches the pattern (prefix + any value + suffix)
            if (strncmp(command, prefix, strlen(prefix)) == 0 &&
                strcmp(command + strlen(command) - strlen(suffix), suffix) == 0) {
                printf("Command: %s -> %s\n", command, error_map[i].error_message);
                return;
            }
        }
    }

    printf("Command: %s -> Not found in the error map.\n", command);
}

int main() {
    char input[MAX_LINE_LENGTH];

    printf("Welcome to the interactive REPL!!!!!!\n");

    while (1) {
        printf("/> ");
        fgets(input, MAX_LINE_LENGTH, stdin);
        input[strcspn(input, "\n")] = 0;  // Remove trailing newline

        // Check if the input is the "exit" command
        if (strcmp(input, "exit") == 0) {
            printf("Now leaving the REPL......\n");
            break;
        }

        // Lookup error based on input command
        lookup_error(input);

        // Print the received input message if no match found
        printf("Received input, evaluate......\n");
    }

    return 0;
}

