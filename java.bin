#include <stdio.h>
#include <string.h>

// Maximum size of input strings
#define MAX_LINE_LENGTH 256

// Declare the error functions before using them
void error_one(const char* command);
void error_two(const char* command);

// Define function pointer type for error functions
typedef void (*ErrorFunction)(const char* command);

// Define the structure for error mapping
typedef struct {
    char command[MAX_LINE_LENGTH];
    ErrorFunction error_func;
} ErrorMapping;

// Predefined error mappings based on the commands provided
ErrorMapping error_map[] = {
    {"${value}", error_one},
    {"${value}\"\"", error_two}
    // Add more mappings as necessary
};

// Define the error handling functions
void error_one(const char* command) {
    printf("Command: %s -> Error on line 1: Uncaught ReferenceError: %s is not defined\n", command, command);
}

void error_two(const char* command) {
    printf("Command: %s -> Error on line 1: Uncaught SyntaxError: Unexpected string\n", command);
}

void lookup_error(const char* input) {
    int input_length = strlen(input);
    int has_whitespace = 0;

    // Check if input has whitespace
    for (int i = 0; i < input_length; i++) {
        if (input[i] == ' ') {
            has_whitespace = 1;
            break;
        }
    }

    // If input has no white space and no quotations, call error_one
    if (!has_whitespace && strchr(input, '"') == NULL) {
        error_one(input);
        return;
    }

    // If input has no white space and suffix equals two quotations, call error_two
    if (!has_whitespace && input_length >= 2 && strcmp(&input[input_length - 2], "\"\"") == 0) {
        error_two(input);
        return;
    }

    printf("Command: %s -> Not found in the error map.\n", input);
}

int main() {
    char input[MAX_LINE_LENGTH];

    printf("Welcome to the interactive REPL!!!\n");

    while (1) {
        printf("/> ");
        fgets(input, MAX_LINE_LENGTH, stdin);
        input[strcspn(input, "\n")] = 0;

        if (strcmp(input, "exit") == 0) {
            printf("Now leaving the REPL......\n");
            break;
        }

        lookup_error(input);
        printf("Received input, evaluate......\n");
    }

    return 0;
}