 
small simple accordion menu script
Nathan Stamm
·
Last edited March 12, 2021
·
8 minute read
small simple accordion menu script
 

Here is a nice example of a modern extensible accordion menu written in basic Jscript and perfected from a multitude of examples I found online. This seems to be one of the simpler and yet more misunderstood examples of simple code to find in a complete form on the web. I would say the reason is the lack of extensible and complete code; every one wants an example that will allow for and unlimited heirarchy of sub menu items without having to reinvent the wheel. While the concept is simple when one might want to style up the menu or find a code block that exists in it’s most simple form the web is loaded with examples which don’t measure up to coexist with modern ECMA or to allow for the nuisances one might find among varying block models on the web. This code should play nice regardless, and can be refined to be much more elegant if not to use a more modern api like what might be found in Jquery: In any case the majority of code instantiating this functionality minus some helpful console logs and aside from the modern html5 compat dom elements is still less than 20 lines of actual code, and could probably be concatenated to 10 or less of raw Javascript, sweet!:

 

 

 

<style>

 

 

 

button.accordion {

 

    background-color: #eee;

 

    color: #444;

 

    cursor: pointer;

 

    padding: 18px;

 

    width: 100%;

 

    text-align: left;

 

    border: none;

 

    outline: none;

 

    transition: 0.4s;

 

}

 

 

 

/* Add a background color to the button if it is clicked on (add the .active class with JS), and when you move the mouse over it (hover) */

 

button.accordion.active, button.accordion:hover {

 

    background-color: #ccc;

 

}

 

 

 

/* Style the accordion panel. Note: hidden by default */

 

div.panel {

 

    padding: 0 18px;

 

    background-color: white;

 

}

 

  

 

button.accordion:after {

 

    content: '\02795'; /* Unicode character for "plus" sign (+) */

 

    font-size: 13px;

 

    color: #777;

 

    float: right;

 

    margin-left: 5px;

 

}

 

 

 

button.accordion.active:after {

 

    content: "\2796"; /* Unicode character for "minus" sign (-) */

 

}    

 

 

 

div.panel {

 

    padding: 0 18px;

 

    background-color: white;

 

    max-height: 0;

 

    overflow: hidden;

 

    transition: max-height 0.2s ease-out;

 

}

 

 

 

</style>

 

 

 

 

 

 

 

  <button class="accordion" id="button1">Section 1</button>

 

<div class="panel" id="panel1">

 

  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

 

<button class="accordion" id="button1b">Section 1b</button>

 

<div class="panel" id="panel2">

 

  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

 

</div>

 

  <button class="accordion" id="button2b">Section 2b</button>

 

<div class="panel" id="panel3">

 

  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

 

</div>

 

  <button class="accordion" id="button3b">Section 3b</button>

 

<div class="panel" id="panel3b">

 

  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

 

  <button class="accordion" id="button4">Section 4</button>

 

<div class="panel" id="panel4">

 

  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

 

</div>

 

  <button class="accordion" id="button5">Section 5</button>

 

<div class="panel" id="panel5">

 

  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

 

</div>

 

  <button class="accordion" id="button6">Section 6</button>

 

<div class="panel" id="panel6">

 

  <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>

 

</div>  

 

  

 

  </div>

 

</div>

 

 

 

 

 

<button class="accordion" id="panel2">Section 2</button>

 

<div class="panel">

 

  <p>Lorem ipsum...</p>

 

</div>

 

 

 

<button class="accordion">Section 3</button>

 

<div class="panel">

 

  <p>Lorem ipsum...</p>

 

</div>  

 

 

 

 

 

 

 

<script>

 

 

 

var acc = document.getElementsByClassName("accordion");

 

var i;

 

 

 

var parent, typeParent, typeThis;

 

  

 

var loopParents = function(typeParent,typeThis){

 

  

 

  //var aparent = this.parentElement;

 

  //var parent = typeParent.parentElement;

 

if (typeof typeParent == 'undefined')

 

  {

 

  } else {

 

  if (typeParent.tagName == "DIV")

 

    {  

 

      //console.log("parent height "+typeParent.style.maxHeight);

 

var newheight = typeParent.style.maxHeight;

 

newheight = newheight.toString();

 

newheight.slice(0,-2);

 

newheight = parseInt(newheight);

 

      console.log("parent height "+newheight);     

 

typeParent.style.maxHeight = Number(newheight) + Number(typeThis) + "px";      

 

      console.log("add to parent "+typeThis);

 

      

 

      typeParent = typeParent.parentElement;

 

 

 

    //alert(typeThis);

 

    return loopParents(typeParent, typeThis);

 

 

 

  } else {

 

   //alert('end');

 

      //return true;

 

  }

 

  }

 

 

 

  //if (aparent.tagName == "DIV")

 

    //{ 

 

  //return loopParents(aparent.style.maxHeight); 

 

    //}  

 

 

 

};

 

 

 

for (i = 0; i < acc.length; i++) {

 

  acc[i].onclick = function () {

 

    this.classList.toggle("active");

 

            

 

    var panel = this.nextElementSibling;

 

    var parent = this.parentElement;

 

if (typeof parent == 'undefined')

 

  {

 

      //alert('testing');

 

  } else

 

    {

 

      if (parent.tagName == "DIV")

 

        {

 

//loopParents(this); 

 

          var parent_height = parent.scrollHeight;

 

            var this_height = this.nextElementSibling.scrollHeight;

 

          

 

//alert(panel.parentElement.id);

 

        }

 

    }

 

    

 

    if (panel.style.maxHeight){

 

      panel.style.maxHeight = null;

 

      

 

    } else {

 

      //panel.style.height = panel.scrollHeight + "px";

 

 

 

      if (parent.tagName == "DIV")

 

        {

 

          //parent.style.maxHeight = Number(total);

 

          var total = Number(parent_height) + Number(this_height);

 

          parent.style.maxHeight = total + "px";

 

          var next = parent.parentElement;

 

//loopParents(parent, next, next.style.maxHeight); 

 

loopParents(parent,this_height);

 

        }

 

      panel.style.maxHeight = panel.scrollHeight + "px";      

 

    } 

 

  }

 

}

 

 

 

 

 

</script> 
